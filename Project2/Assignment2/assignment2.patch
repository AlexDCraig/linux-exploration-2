diff -rupN /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2OldFiles/Kconfig.iosched /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2/Kconfig.iosched
--- /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2OldFiles/Kconfig.iosched	2017-05-03 13:41:05.780682048 -0700
+++ /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2/Kconfig.iosched	2017-05-03 20:37:01.701375449 -0700
@@ -32,6 +32,12 @@ config IOSCHED_CFQ
 
 	  This is the default I/O scheduler.
 
+config IOSCHED_LOOK
+	tristate "LOOK I/O scheduler"
+	default y
+	---help---
+	Elevator motion, back and forth
+
 config CFQ_GROUP_IOSCHED
 	bool "CFQ Group Scheduling support"
 	depends on IOSCHED_CFQ && BLK_CGROUP
@@ -55,6 +61,9 @@ choice
 	config DEFAULT_NOOP
 		bool "No-op"
 
+	config DEFAULT_LOOK
+		bool "Look" if IOSCHED_LOOK=y
+
 endchoice
 
 config DEFAULT_IOSCHED
@@ -62,6 +71,7 @@ config DEFAULT_IOSCHED
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "look" if DEFAULT_LOOK
 endmenu
 
 endif
diff -rupN /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2OldFiles/Makefile /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2/Makefile
--- /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2OldFiles/Makefile	2017-05-03 13:41:12.537793719 -0700
+++ /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2/Makefile	2017-05-03 20:37:08.429484121 -0700
@@ -16,6 +16,8 @@ obj-$(CONFIG_BLK_DEV_THROTTLING)	+= blk-
 obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
+obj-$(CONFIG_IOSCHED_LOOK)	+= sstf-iosched.o
+
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY)	+= blk-integrity.o
 obj-$(CONFIG_BLK_CMDLINE_PARSER)	+= cmdline-parser.o
diff -rupN /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2OldFiles/noop-iosched.c /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2/noop-iosched.c
--- /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2OldFiles/noop-iosched.c	2017-05-03 13:41:51.428436434 -0700
+++ /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2/noop-iosched.c	1969-12-31 16:00:00.000000000 -0800
@@ -1,124 +0,0 @@
-/*
- * elevator noop
- */
-#include <linux/blkdev.h>
-#include <linux/elevator.h>
-#include <linux/bio.h>
-#include <linux/module.h>
-#include <linux/slab.h>
-#include <linux/init.h>
-
-struct noop_data {
-	struct list_head queue;
-};
-
-static void noop_merged_requests(struct request_queue *q, struct request *rq,
-				 struct request *next)
-{
-	list_del_init(&next->queuelist);
-}
-
-static int noop_dispatch(struct request_queue *q, int force)
-{
-	struct noop_data *nd = q->elevator->elevator_data;
-
-	if (!list_empty(&nd->queue)) {
-		struct request *rq;
-		rq = list_entry(nd->queue.next, struct request, queuelist);
-		list_del_init(&rq->queuelist);
-		elv_dispatch_sort(q, rq);
-		return 1;
-	}
-	return 0;
-}
-
-static void noop_add_request(struct request_queue *q, struct request *rq)
-{
-	struct noop_data *nd = q->elevator->elevator_data;
-
-	list_add_tail(&rq->queuelist, &nd->queue);
-}
-
-static struct request *
-noop_former_request(struct request_queue *q, struct request *rq)
-{
-	struct noop_data *nd = q->elevator->elevator_data;
-
-	if (rq->queuelist.prev == &nd->queue)
-		return NULL;
-	return list_entry(rq->queuelist.prev, struct request, queuelist);
-}
-
-static struct request *
-noop_latter_request(struct request_queue *q, struct request *rq)
-{
-	struct noop_data *nd = q->elevator->elevator_data;
-
-	if (rq->queuelist.next == &nd->queue)
-		return NULL;
-	return list_entry(rq->queuelist.next, struct request, queuelist);
-}
-
-static int noop_init_queue(struct request_queue *q, struct elevator_type *e)
-{
-	struct noop_data *nd;
-	struct elevator_queue *eq;
-
-	eq = elevator_alloc(q, e);
-	if (!eq)
-		return -ENOMEM;
-
-	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
-	if (!nd) {
-		kobject_put(&eq->kobj);
-		return -ENOMEM;
-	}
-	eq->elevator_data = nd;
-
-	INIT_LIST_HEAD(&nd->queue);
-
-	spin_lock_irq(q->queue_lock);
-	q->elevator = eq;
-	spin_unlock_irq(q->queue_lock);
-	return 0;
-}
-
-static void noop_exit_queue(struct elevator_queue *e)
-{
-	struct noop_data *nd = e->elevator_data;
-
-	BUG_ON(!list_empty(&nd->queue));
-	kfree(nd);
-}
-
-static struct elevator_type elevator_noop = {
-	.ops = {
-		.elevator_merge_req_fn		= noop_merged_requests,
-		.elevator_dispatch_fn		= noop_dispatch,
-		.elevator_add_req_fn		= noop_add_request,
-		.elevator_former_req_fn		= noop_former_request,
-		.elevator_latter_req_fn		= noop_latter_request,
-		.elevator_init_fn		= noop_init_queue,
-		.elevator_exit_fn		= noop_exit_queue,
-	},
-	.elevator_name = "noop",
-	.elevator_owner = THIS_MODULE,
-};
-
-static int __init noop_init(void)
-{
-	return elv_register(&elevator_noop);
-}
-
-static void __exit noop_exit(void)
-{
-	elv_unregister(&elevator_noop);
-}
-
-module_init(noop_init);
-module_exit(noop_exit);
-
-
-MODULE_AUTHOR("Jens Axboe");
-MODULE_LICENSE("GPL");
-MODULE_DESCRIPTION("No-op IO scheduler");
diff -rupN /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2OldFiles/sstf-iosched.c /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2/sstf-iosched.c
--- /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2OldFiles/sstf-iosched.c	1969-12-31 16:00:00.000000000 -0800
+++ /scratch/spring2017/10-04/linux-yocto-3.14/block/Assignment2/sstf-iosched.c	2017-05-03 20:36:37.817989708 -0700
@@ -0,0 +1,181 @@
+/*
+ * elevator c-look
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+int diskhead = -1;
+
+struct sstf_data {
+	struct list_head queue;
+};
+
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+
+static int sstf_dispatch(struct request_queue *q, int force)
+{
+	printk("In the DISPATCH for the SSTF algorithm.\n");
+
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (!list_empty(&nd->queue)) {
+		struct request *rq;
+
+		rq = list_entry(nd->queue.next, struct request, queuelist);
+		list_del_init(&rq->queuelist);
+		elv_dispatch_sort(q, rq);
+
+		//assign a position to the disk head
+		diskhead = blk_rq_pos(rq);
+
+		//print whether data is being read or being written
+		char direction;
+		if(rq_data_dir(rq) == READ)
+		{
+            direction = 'R';
+		printk("DISPATCH: Satisfying requests in the READ direction.\n");
+		}
+		else
+		{
+            direction = 'W';
+		printk("DISPATCH: Satisfying requests in the WRITE direction.\n");
+		}
+		printk("[SSTF] DISPATCH DIRECTION: %c DISPATCH REQUEST NUMBER: %lu\n", direction, (unsigned long)blk_rq_pos(rq));
+
+		return 1;
+	}
+	return 0;
+}
+
+static void sstf_add_request(struct request_queue *q, struct request *rq)
+{
+	printk("ADDING REQUEST\n");
+
+	struct sstf_data *nd = q->elevator->elevator_data;
+	struct list_head *cur = NULL;
+
+	//advance cur each time
+	list_for_each(cur, &nd->queue)
+	{
+		struct request *c = list_entry(cur, struct request, queuelist);
+		if(blk_rq_pos(rq) < diskhead) // check if request is bigger than disk head
+		{
+            //keep servicing bigger requests until it comes across a smaller request
+            //insert when current is smaller than the head and bigger than the request
+			if(blk_rq_pos(c) < diskhead && blk_rq_pos(rq) < blk_rq_pos(c))
+            {
+                    break;
+            }
+		}
+		//otherwise the request is bigger than the disk head
+		else
+		{
+		//find where current is smaller than the disk head or current smaller than request
+			if(blk_rq_pos(c) < diskhead ||
+			   blk_rq_pos(rq) < blk_rq_pos(c))
+				break;
+		}
+	}
+
+	char direction;
+
+	//print out whether data is being read or written by checking direction
+	if(rq_data_dir(rq) == READ)
+		direction = 'R';
+	else
+		direction = 'W';
+	printk("[SSTF] ADDING REQUEST. DIRECTION: %c REQUEST NUMBER: %lu\n", direction, (unsigned long)blk_rq_pos(rq));
+
+	//add to end of queue
+	list_add_tail(&rq->queuelist, cur);
+
+}
+
+static int sstf_queue_empty(struct request_queue *q)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	return list_empty(&nd->queue);
+}
+
+static struct request *
+sstf_former_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+sstf_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static void *sstf_init_queue(struct request_queue *q)
+{
+	struct sstf_data *nd;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd)
+		return NULL;
+	INIT_LIST_HEAD(&nd->queue);
+	return nd;
+}
+
+static void sstf_exit_queue(struct elevator_queue *e)
+{
+	struct sstf_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_sstf = {
+	.ops = {
+		.elevator_merge_req_fn		= sstf_merged_requests,
+		.elevator_dispatch_fn		= sstf_dispatch,
+		.elevator_add_req_fn		= sstf_add_request,
+		.elevator_queue_empty_fn	= sstf_queue_empty,
+		.elevator_former_req_fn		= sstf_former_request,
+		.elevator_latter_req_fn		= sstf_latter_request,
+		.elevator_init_fn		= sstf_init_queue,
+		.elevator_exit_fn		= sstf_exit_queue,
+	},
+	.elevator_name = "sstf",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init sstf_init(void)
+{
+	elv_register(&elevator_sstf);
+	return 0;
+}
+
+static void __exit sstf_exit(void)
+{
+	elv_unregister(&elevator_sstf);
+}
+
+module_init(sstf_init);
+module_exit(sstf_exit);
+
+
+MODULE_AUTHOR("Nehemiah Edwards");
+MODULE_LICENSE("--");
+MODULE_DESCRIPTION("C-LOOK IO scheduler");
+
